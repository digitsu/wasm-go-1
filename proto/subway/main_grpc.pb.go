// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubwayMapClient is the client API for SubwayMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubwayMapClient interface {
	AskDirection(ctx context.Context, in *DirectionRequest, opts ...grpc.CallOption) (*DirectionResponse, error)
}

type subwayMapClient struct {
	cc grpc.ClientConnInterface
}

func NewSubwayMapClient(cc grpc.ClientConnInterface) SubwayMapClient {
	return &subwayMapClient{cc}
}

func (c *subwayMapClient) AskDirection(ctx context.Context, in *DirectionRequest, opts ...grpc.CallOption) (*DirectionResponse, error) {
	out := new(DirectionResponse)
	err := c.cc.Invoke(ctx, "/subway.SubwayMap/AskDirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubwayMapServer is the server API for SubwayMap service.
// All implementations must embed UnimplementedSubwayMapServer
// for forward compatibility
type SubwayMapServer interface {
	AskDirection(context.Context, *DirectionRequest) (*DirectionResponse, error)
	mustEmbedUnimplementedSubwayMapServer()
}

// UnimplementedSubwayMapServer must be embedded to have forward compatible implementations.
type UnimplementedSubwayMapServer struct {
}

func (UnimplementedSubwayMapServer) AskDirection(context.Context, *DirectionRequest) (*DirectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskDirection not implemented")
}
func (UnimplementedSubwayMapServer) mustEmbedUnimplementedSubwayMapServer() {}

// UnsafeSubwayMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubwayMapServer will
// result in compilation errors.
type UnsafeSubwayMapServer interface {
	mustEmbedUnimplementedSubwayMapServer()
}

func RegisterSubwayMapServer(s *grpc.Server, srv SubwayMapServer) {
	s.RegisterService(&_SubwayMap_serviceDesc, srv)
}

func _SubwayMap_AskDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubwayMapServer).AskDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subway.SubwayMap/AskDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubwayMapServer).AskDirection(ctx, req.(*DirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubwayMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subway.SubwayMap",
	HandlerType: (*SubwayMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskDirection",
			Handler:    _SubwayMap_AskDirection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
